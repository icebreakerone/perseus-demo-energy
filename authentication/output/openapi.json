{"openapi": "3.1.0", "info": {"title": "Perseus Demo Authentication Server", "description": "Perseus Demo Authentication Server", "version": "1.0.0"}, "paths": {"/": {"get": {"summary": "Docs", "operationId": "docs__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "object", "title": "Response Docs  Get"}}}}}}}, "/api/v1/par": {"post": {"summary": "Pushed Authorization Request", "description": "Store the request in redis, return a request_uri to the client\n\nFor more information see:\n\n- [Pushed Authorization Request Endpoint](https://www.rfc-editor.org/rfc/rfc9126.html#section-2)\n- [Client authentication methods](https://www.rfc-editor.org/rfc/rfc6749.html#section-3.2.1)", "operationId": "pushed_authorization_request_api_v1_par_post", "parameters": [{"name": "x-amzn-mtls-clientcert", "in": "header", "required": true, "schema": {"type": "string", "title": "X-Amzn-Mtls-Clientcert"}}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_pushed_authorization_request_api_v1_par_post"}}}}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PushedAuthorizationResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/authorize": {"get": {"summary": "Authorize", "operationId": "authorize_api_v1_authorize_get", "parameters": [{"name": "request_uri", "in": "query", "required": true, "schema": {"type": "string", "title": "Request Uri"}}, {"name": "x-amzn-mtls-clientcert", "in": "header", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "X-Amzn-Mtls-Clientcert"}}], "responses": {"200": {"description": "This response is not expected.", "content": {"application/json": {"schema": {}}}}, "302": {"description": "Redirects to authentication and consent", "headers": {"Location": {"description": "The URL to which the client should be redirected"}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/authorize/token": {"post": {"summary": "Token", "description": "Token issuing endpoint\n\nWe use the Ory Hydra endpoint to issue the token and validate authorisation code flow\nbut due to missing features in Ory Hydra authorisation code flow we need to generate\nour own id_token, and add client certificate details to the token", "operationId": "token_api_v1_authorize_token_post", "parameters": [{"name": "x-amzn-mtls-clientcert", "in": "header", "required": true, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "X-Amzn-Mtls-Clientcert"}}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_token_api_v1_authorize_token_post"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TokenResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/.well-known/openid-configuration": {"get": {"summary": "Get Openid Configuration", "operationId": "get_openid_configuration__well_known_openid_configuration_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/.well-known/jwks.json": {"get": {"summary": "Get Jwks", "operationId": "get_jwks__well_known_jwks_json_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}}, "components": {"schemas": {"Body_pushed_authorization_request_api_v1_par_post": {"properties": {"response_type": {"type": "string", "title": "Response Type"}, "redirect_uri": {"type": "string", "title": "Redirect Uri"}, "state": {"type": "string", "title": "State"}, "code_challenge": {"type": "string", "title": "Code Challenge"}, "scope": {"type": "string", "title": "Scope"}}, "type": "object", "required": ["response_type", "redirect_uri", "state", "code_challenge", "scope"], "title": "Body_pushed_authorization_request_api_v1_par_post"}, "Body_token_api_v1_authorize_token_post": {"properties": {"grant_type": {"type": "string", "title": "Grant Type"}, "redirect_uri": {"type": "string", "title": "Redirect Uri"}, "code_verifier": {"type": "string", "title": "Code Verifier"}, "code": {"type": "string", "title": "Code"}}, "type": "object", "required": ["grant_type", "redirect_uri", "code_verifier", "code"], "title": "Body_token_api_v1_authorize_token_post"}, "HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "PushedAuthorizationResponse": {"properties": {"expires_in": {"type": "integer", "title": "Expires In"}, "request_uri": {"type": "string", "title": "Request Uri"}}, "type": "object", "required": ["expires_in", "request_uri"], "title": "PushedAuthorizationResponse", "description": "", "examples": [{"expires_in": 600, "request_uri": "urn:ietf:params:oauth:request_uri:UymBrux4ZEMrBRKx9UyKyIm98zpX1cHmAPGAGNofmm4"}]}, "TokenResponse": {"properties": {"access_token": {"type": "string", "title": "Access Token"}, "refresh_token": {"type": "string", "title": "Refresh Token"}}, "type": "object", "required": ["access_token", "refresh_token"], "title": "TokenResponse", "examples": [{"access_token": "SUtEVc3Tj3D3xOdysQtssQxe9egAhI4fimexNVMjRyU", "id_token": "eyJraWQiOiIxIiwiYWxnIjoiRVMyNTYifQ.eyJzdWIiOiJ0ZXN0dXNlcjAxIiwiYXVkIjpbIjU5MTIwNTk4NzgxNjQ5MCJdLCJpc3MiOiJodHRwczovL2FzLmV4YW1wbGUuY29tIiwiZXhwIjoxNTcyNDEyNzY5LCJpYXQiOjE1NzIzMjYzNjksIm5vbmNlIjoibi0wUzZfV3pBMk1qIn0.9EQojck-Cf2hnKAZWR164kr21o5lPKehvIHyViZgRg4CY_ZGmnyFooG4FCwlZxu-QOTtaDCffCsuCdz4GqknTA", "refresh_token": "tXZjYfoK35I-djg9V3n6s58zsrVqRIzTNMXKIS_wkj8"}]}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}}}, "servers": [{"url": "https://localhost:8000"}]}